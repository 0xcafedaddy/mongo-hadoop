import org.apache.tools.ant.filters.ReplaceTokens

task installHadoop() << {
    new File(hadoopHome).getParentFile().mkdirs()

    def url = "http://archive.apache.org/dist/hadoop/common/hadoop-${hadoopVersion}/hadoop-${hadoopVersion}.tar.gz"

    download(url, hadoopBinaries, hadoopHome)
}

def download(url, destination, target) {
    def file = new URL(url).getPath()
    file = "${destination}/${file.substring(file.lastIndexOf('/') + 1)}"
    def count = 0;
    while (!(new File(target + "/bin").exists())) {
        try {
            if(!new File(file).exists()) {
                println "${target} not found.  Downloading from ${url} to ${file}"
            }
            download {
                src url
                dest destination
                onlyIfNewer true
            }

            if(!new File(destination).exists()) {
                println "Extracting ${file}"
            }
            copy {
                from(tarTree(resources.gzip(file)))
                into destination
            }
        } catch (Exception e) {
            println "Extraction failed: " + e.getMessage()
            println "Trying again"
            new File(target).deleteDir()
            new File(file).delete()
        }
        if(count++ > 3) {
            throw new GradleException("Failed to download after 3 attempts: ${url}");
        }
    }
}

task installHive() << {
    def url = "https://archive.apache.org/dist/hive/hive-${hiveVersion}/hive-${hiveVersion}.tar.gz"

    download(url, hadoopBinaries, hiveHome)
}

task installPig() << {
    def url = "https://archive.apache.org/dist/pig/pig-${pigVersion}/pig-${pigVersion}.tar.gz"

    download(url, hadoopBinaries, pigHome)
}

task copyFiles(dependsOn: [installHadoop, installHive, installPig]) << {
    def hadoopEtc = "${hadoopHome}/etc/hadoop"
    def hadoopLib = "${hadoopHome}/share/hadoop/common"

    println "Updating mongo jars"
    
    safeCopy("core/build/libs/mongo-hadoop-core-${project(':core').version}.jar", hadoopLib, "mongo-hadoop-core.jar")
    safeCopy("streaming/build/libs/mongo-hadoop-streaming-${project(':core').version}.jar", hadoopLib, "mongo-hadoop-streaming.jar")
    safeCopy("hive/build/libs/mongo-hadoop-hive-${project(':core').version}.jar", hiveHome + '/lib', "mongo-hadoop-hive.jar")
    safeCopy(findJar(":core", "mongo-java-driver"), hadoopLib, "mongo-java-driver.jar")
    
    println "Updating cluster configuration"
    copy {
        from 'clusterConfigs'
        into hadoopEtc
        filter ReplaceTokens, tokens: [
                HADOOP_BINARIES: hadoopBinaries.toString()
        ]
    }
}

def findJar(String proj, String filter) {
    project(proj).configurations.compile.find { it.name.startsWith(filter) }
}

def safeCopy(fromPath, toPath, newName) {
    def copied = copy {
        from fromPath
        into toPath
        rename { newName }
    }.didWork

    if (!copied) {
        throw new GradleException("Failed to copy a file: " + fromPath, new FileNotFoundException(fromPath))
    }
}