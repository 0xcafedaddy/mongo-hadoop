apply plugin: 'java'

def configDir = new File(rootDir, 'config')
def cdh4rel = 'cdh4.3.0'
def hadoop_version = project.getProperties().get('hadoop_version', 'cdh4')
def versionMap = [
        '0.23': '0.23.10',
        '1.0' : '1.0.4',
        '1.1' : '1.1.2',
        'cdh4': "2.0.0-${cdh4rel}",
        '2.2' : '2.2.0'
].withDefault {
    throw new GradleException("Unknown hadoop version: ${hadoop_version}")
}
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'me.trnl:github-release-gradle-plugin:0.1'
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.3'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    }

    group = 'org.mongodb.mongo-hadoop'
    version = '1.2.1-SNAPSHOT'

    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    dependencies {
        compile "org.mongodb:mongo-java-driver:2.11.3"

        testCompile 'junit:junit:4.11'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
//        options.compilerArgs = ['-Xlint:all', '-Xlint:-options']
    }

    project.ext.buildingWith = { n ->
        project.hasProperty(n) && project.property(n).toBoolean()
    }

    /* Testing */
    tasks.withType(Test) {
        maxParallelForks = 1

        beforeTest { descr ->
            logger.info("[Test ${descr.className} > ${descr.name}]")
        }
    }

    task testAll(dependsOn: tasks.withType(Test))
    check.dependsOn testAll

    /* Code quality */
    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    checkstyleTest {
        classpath += configurations.compile
    }

    checkstyleMain {
        classpath += configurations.compile
    }

    findbugs {
        excludeFilter = new File("$configDir/findbugs-exclude.xml")
        sourceSets = [sourceSets.main]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
        }
    }

    compileJava.onlyIf { false }

    jar {
        onlyIf { classifier != "" }
        classifier = "hadoop_${hadoop_version}"
    }

    task listDependencies << {
        configurations.compile.each { File file -> println file }
    }
}

configure(subprojects.findAll { it.name.contains('examples/') }) {
    jar {
        baseName = project.name.split('/')[1]
    }
}

project(":core") {
    archivesBaseName = "mongo-hadoop-core"

    versionMap.each { key, value ->
        def configuration = configurations.create("compile-$key")
                                          .extendsFrom(configurations['compile'])
        coreDeps(project, key, configuration.name, versionMap[key])

        createTasks(project, key, configuration)
    }
}

def coreDeps(project, String key, String name, version) {
    switch (key) {
        case ("0.23"):
            project.dependencies.add(name, "org.apache.hadoop:hadoop-common:${version}")
            mapReduceDeps(name, project.dependencies, version)
            break
        case ("1.0"):
            project.dependencies.add(name, "org.apache.hadoop:hadoop-core:${version}")
            break
        case ("1.1"):
            project.dependencies.add(name, "org.apache.hadoop:hadoop-core:${version}")
            break
        case ("cdh4"):
            project.dependencies.add(name, "org.apache.hadoop:hadoop-common:${version}")
            mapReduceDeps(name, project.dependencies, version)
            break
        case ("2.2"):
            project.dependencies.add(name, "org.apache.hadoop:hadoop-common:${version}")
            mapReduceDeps(name, project.dependencies, version)
            break
    }
}

def void createTasks(project, key, configuration, includeDriver = false) {
    def hadoopCompile = compileTask(project, key, configuration)

    def hadoopJar = jarTask(project, key, hadoopCompile, includeDriver)

    project.artifacts {
        archives hadoopJar
    }
}

def jarTask(project, key, hadoopCompile, includeDriver = false) {
    def hadoopJar = project.tasks.create(name: "${project.name}-jar-hadoop-${key}", type: Jar) {
        classifier = "hadoop_${key}"
        from project.sourceSets.main.output
    }
    hadoopJar.dependsOn(hadoopCompile)
    project.jar.dependsOn(hadoopJar)
//    project.uploadArchives.dependsOn(hadoopJar)    
}

def compileTask(project, key, configuration) {
    def hadoopCompile = project.tasks.create(name: "${project.name}-compile-hadoop-${key}", type: JavaCompile) {
        classpath = project.configurations[configuration.name]
        source = project.sourceSets.main.allJava
        destinationDir = project.sourceSets.main.output.classesDir
    }
    hadoopCompile.dependsOn(project.cleanCompileJava)

    hadoopCompile
}

project(":hive") {
    archivesBaseName = "mongo-hadoop-hive"

    versionMap.each { key, value ->
        def configuration = configurations.create("compile-$key")
                                          .extendsFrom(configurations['compile'])
        def name = configuration.name

        project.dependencies.add(name, [group  : project.group, name: 'mongo-hadoop-core',
                                        version: project.version, classifier: "hadoop_${key}"])

        coreDeps(project, key, name, versionMap[key])

        project.dependencies.add(name, "org.apache.hive:hive-exec:0.10.0")

        if (hadoop_version == "cdh4") {
            project.dependencies.add(name, "org.apache.hive:hive-serde:0.10.0-cdh4.2.0")
        } else {
            project.dependencies.add(name, "org.apache.hive:hive-serde:0.10.0")
        }

        createTasks(project, key, configuration)
    }

}

project(":pig") {
    archivesBaseName = "mongo-hadoop-pig"
    jar { onlyIf { false } }
    versionMap.each { key, value ->
        def configuration = configurations.create("compile-$key")
                                          .extendsFrom(configurations['compile'])
        def name = configuration.name

        project.dependencies.add(name, [group  : project.group, name: 'mongo-hadoop-core',
                                        version: project.version, classifier: "hadoop_${key}"])

        coreDeps(project, key, name, versionMap[key])
        project.dependencies.add(name, "org.antlr:antlr:3.4")

        if (hadoop_version == "cdh4") {
            project.dependencies.add(name, "org.apache.pig:pig:0.10.0-cdh4.2.0")
        } else {
            project.dependencies.add(name, "org.apache.pig:pig:0.9.2")
        }

        def hadoopCompile = compileTask(project, key, configuration)

        def hadoopJar = project.tasks.create(name: "${project.name}-jar-hadoop-${key}", type: Jar) {
            classifier = "hadoop_${key}"
            from project.sourceSets.main.output
            from project(':core').sourceSets.main.output
            configurations.compile.filter {
                it.name.startsWith('mongo-java-driver')
            }.each {
                from zipTree(it)
            }
        }
        hadoopJar.dependsOn(hadoopCompile)
        project.jar.dependsOn(hadoopJar)


        project.artifacts {
            archives hadoopJar
        }
    }

}

project(":streaming") {
    archivesBaseName = "mongo-hadoop-streaming"
    jar { onlyIf { false } }

    versionMap.each { key, value ->
        def configuration = configurations.create("compile-$key")
                                          .extendsFrom(configurations['compile'])
        def name = configuration.name

        project.dependencies.add(name, [group  : project.group, name: 'mongo-hadoop-core',
                                        version: project.version, classifier: "hadoop_${key}"])

        coreDeps(project, key, name, versionMap[key])
        project.dependencies.add(name, "org.apache.hadoop:hadoop-streaming:${versionMap[hadoop_version]}")

        def hadoopCompile = compileTask(project, key, configuration)

        def hadoopJar = project.tasks.create(name: "${project.name}-jar-hadoop-${key}", type: Jar) {
            onlyIf { key != "1.0" }

            classifier = "hadoop_${key}"
            from project.sourceSets.main.output
            from project(':core').sourceSets.main.output
            configurations.compile.filter {
                it.name.startsWith('mongo-java-driver')
            }.each {
                from zipTree(it)
            }
        }
        hadoopJar.dependsOn(hadoopCompile)
        project.jar.dependsOn(hadoopJar)


        project.artifacts {
            archives hadoopJar
        }

    }
}

project(":flume") {
    dependencies {
        compile project(':core')
        compile "com.cloudera:flume-core:0.9.4-cdh3u3"
    }
}

project(":examples/ufo_sightings") {
    dependencies {
        compile project(':core')
    }
}

project(":examples/treasury_yield") {
    dependencies {
        compile project(':core')
    }
}

project(":examples/enron") {
    dependencies {
        compile group: project.group, name: 'mongo-hadoop-core', version: project.version, classifier: 'hadoop_2.2'
    }
}

project(":examples/sensors") {
    dependencies {
        compile project(':core')
    }
}

/*
task('build-all') {
    ["0.23", "1.0", "1.1", "cdh4", "2.2"].each { version ->
        println "Building with $version"
        project.properties['hadoop_version'] = version
        project.cleanCompileJava
        project.jar
        project.test
    }
}
*/

task yieldHistorical(type: Exec) {
    commandLine "mongoimport", "-d", "mongo_hadoop", "-c", "yield_historical.in", "--drop",
                "examples/treasury_yield/src/main/resources/yield_historical_in.json"
}

task ufoSightings(type: Exec) {
    commandLine "mongoimport", "-d", "mongo_hadoop", "-c", "ufo_sightings.in", "--drop",
                "examples/ufo_sightings/src/main/resources/ufo_awesome.json"
}

task loadSampleDataTask(dependsOn: [":yieldHistorical", ":ufoSightings"]) {
}

def mapReduceDeps(name, dependencies, version) {
    ["core", "common", "shuffle", "app", "jobclient"].each { module ->
        dependencies.add(name, "org.apache.hadoop:hadoop-mapreduce-client-${module}:${version}") {
            exclude group: "org.apache.hadoop", module: "hadoop-hdfs"
        }
    }
}

apply from: 'gradle/maven-deployment.gradle'
