apply plugin: 'java'

def configDir = new File(rootDir, 'config')
def cdh4rel = 'cdh4.3.0'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'me.trnl:clirr-gradle-plugin:0.4'
        classpath 'me.trnl:github-release-gradle-plugin:0.1'
    }
}


configure(subprojects.findAll { it.name != 'util' }) {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    group = 'org.mongodb'
    version = '1.2.0'
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    }

    dependencies {
        testCompile 'junit:junit:4.11'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }
/*
    sourceSets {
        main { java.srcDirs = ['src/main'] }
        test { java.srcDirs = ['src/test'] }
    }
*/

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
//        options.compilerArgs = ['-Xlint:all', '-Xlint:-options']

        onlyIf { JavaVersion.current().isJava7Compatible() }
    }

    project.ext.buildingWith = { n ->
        project.hasProperty(n) && project.property(n).toBoolean()
    }

    /* Testing */
    tasks.withType(Test) {
        maxParallelForks = 1

        jacoco { enabled = false }

        beforeTest { descr ->
            logger.info("[Test ${descr.className} > ${descr.name}]")
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(check)) {
            tasks.withType(Test) { jacoco { enabled = true } }
        }
    }

    task testAll(dependsOn: tasks.withType(Test))
    check.dependsOn testAll

    /* Code quality */
    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File("$configDir/findbugs-exclude.xml")
        sourceSets = [sourceSets.main]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
        }
    }

    task listDependencies << {
        configurations.compile.each { File file -> println file }
    }
}

project(":core") {
    archivesBaseName = "mongo-hadoop-core"

    dependencies {
        compile "org.mongodb:mongo-java-driver:2.11.3"
        switch (project.property('hadoop.version')) {
            case ("0.23"):
                compile "org.apache.hadoop:hadoop-common:0.23.10"
                mapReduceDeps(it, "0.23.10")
                break
            case ("1.0"):
                compile "org.apache.hadoop:hadoop-core:1.0.4"
                break
            case ("1.1"):
                compile "org.apache.hadoop:hadoop-core:1.1.2"
                break
            case ("cdh4"):
                compile "org.apache.hadoop:hadoop-common:2.0.0-${cdh4rel}"
                mapReduceDeps(it, "2.0.0-${cdh4rel}")
                break
            case ("2.2"):
                compile "org.apache.hadoop:hadoop-common:2.2.0"                
                mapReduceDeps(it, "2.2.0")
                break
            default:
                throw new GradleException("Unknown hadoop version: ${project.property('hadoop.version')}")
                break
        }
    }
}

def mapReduceDeps(it, version) {
    ["core", "common", "shuffle", "app", "jobclient"].each {  module ->
        it.compile("org.apache.hadoop:hadoop-mapreduce-client-${module}:${version}") {
            exclude group: "org.apache.hadoop", module: "hadoop-hdfs"            
        }
    }
}


