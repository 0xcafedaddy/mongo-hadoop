apply plugin: 'java'

def configDir = new File(rootDir, 'config')
def cdh4rel = 'cdh4.3.0'
def hadoop_version = project.getProperties().get('hadoop_version', '2.2')
def versionMap = [
        '0.23': '0.23.10',
        '1.0' : '1.0.4',
        '1.1' : '1.1.2',
        'cdh4': "2.0.0-${cdh4rel}",
        '2.2' : '2.2.0'
].withDefault {
    throw new GradleException("Unknown hadoop version: ${hadoop_version}")
}
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'me.trnl:clirr-gradle-plugin:0.4'
        classpath 'com.antwerkz.github:github-release-gradle-plugin:1.0.0-RC3'
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.3'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    }

    group = 'org.mongodb'
    version = '1.2.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    dependencies {
        compile "org.mongodb:mongo-java-driver:2.11.3"

        testCompile 'junit:junit:4.11'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
//        options.compilerArgs = ['-Xlint:all', '-Xlint:-options']
    }

    project.ext.buildingWith = { n ->
        project.hasProperty(n) && project.property(n).toBoolean()
    }

    /* Testing */
    tasks.withType(Test) {
        maxParallelForks = 1

        beforeTest { descr ->
            logger.info("[Test ${descr.className} > ${descr.name}]")
        }
    }

    task testAll(dependsOn: tasks.withType(Test))
    check.dependsOn testAll

    /* Code quality */
    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    checkstyleTest {
        classpath += configurations.compile
    }

    checkstyleMain {
        classpath += configurations.compile
    }

    findbugs {
        excludeFilter = new File("$configDir/findbugs-exclude.xml")
        sourceSets = [sourceSets.main]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
        }
    }

    jar {
        classifier = "hadoop_${hadoop_version}"
    }

    task listDependencies << {
        configurations.compile.each { File file -> println file }
    }

/*
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.allTasks.any { it.name.contains('examples/') && (it instanceof Sign || it instanceof PublishArtifact) }) {
            println "********** it = ${it}"
            taskGraph.allTasks.remove(it)
        }
    }
*/
}

/*
afterEvaluate {
    println "********** afterEvaluate"
    subprojects.each {
        if(it.name.contains('examples/')) {
            println "********** it = ${it}"
            gradle.taskGraph.allTasks.remove(it)
        }
    }
}
*/

configure(subprojects.findAll { it.name.contains('examples/') }) {
    def exampleName = project.name.split('/')[1]
    jar {
        baseName = exampleName
    }
    group += ".mongo-hadoop-examples"

}

project(":core") {
    archivesBaseName = "mongo-hadoop-core"

    dependencies {
        switch (hadoop_version) {
            case ("0.23"):
                compile "org.apache.hadoop:hadoop-common:${versionMap[hadoop_version]}"
                mapReduceDeps(it, versionMap[hadoop_version])
                break
            case ("1.0"):
                compile "org.apache.hadoop:hadoop-core:${versionMap[hadoop_version]}"
                break
            case ("1.1"):
                compile "org.apache.hadoop:hadoop-core:${versionMap[hadoop_version]}"
                break
            case ("cdh4"):
                compile "org.apache.hadoop:hadoop-common:${versionMap[hadoop_version]}"
                mapReduceDeps(it, versionMap[hadoop_version])
                break
            case ("2.2"):
                compile "org.apache.hadoop:hadoop-common:${versionMap[hadoop_version]}"
                mapReduceDeps(it, versionMap[hadoop_version])
                break
        }
    }
}

project(":hive") {
    archivesBaseName = "mongo-hadoop-hive"
    dependencies {
        compile project(':core')

        compile "org.apache.hive:hive-exec:0.10.0"
        if (hadoop_version == "cdh4") {
            compile "org.apache.hive:hive-serde:0.10.0-cdh4.2.0"
        } else {
            compile "org.apache.hive:hive-serde:0.10.0"
        }
    }
}

project(":pig") {
    archivesBaseName = "mongo-hadoop-pig"
    dependencies {
        compile project(':core')
        compile "org.antlr:antlr:3.4"

        if (hadoop_version == "cdh4") {
            compile "org.apache.pig:pig:0.10.0-cdh4.2.0"
        } else {
            compile "org.apache.pig:pig:0.9.2"
        }
    }

    jar {
        from project(':core').sourceSets.main.output
        from sourceSets.main.output

        configurations.compile.filter {
            it.name.startsWith('mongo-java-driver')
        }.each {
            from zipTree(it)
        }
    }

}

project(":streaming") {
    archivesBaseName = "mongo-hadoop-streaming"

    dependencies {
        compile project(':core')
        compile "org.apache.hadoop:hadoop-streaming:${versionMap[hadoop_version]}"
    }

    jar {
        onlyIf { hadoop_version != "1.0" }

        from project(':core').sourceSets.main.output
        from sourceSets.main.output

        configurations.compile.filter {
            it.name.startsWith('mongo-java-driver')
        }.each {
            from zipTree(it)
        }
    }
}

project(":flume") {
    dependencies {
        compile project(':core')
        compile "com.cloudera:flume-core:0.9.4-cdh3u3"
    }
}

project(":examples/ufo_sightings") {
    dependencies {
        compile project(':core')
    }
}

project(":examples/treasury_yield") {
    dependencies {
        compile project(':core')
    }
}

project(":examples/enron") {
    uploadArchives {
    }
    dependencies {
        compile project(':core')
    }
}

project(":examples/sensors") {
    dependencies {
        compile project(':core')
    }
}

task yieldHistorical() {
    exec() {
        commandLine "mongoimport", "-d", "mongo_hadoop", "-c", "yield_historical.in", "--drop",
                    "examples/treasury_yield/src/main/resources/yield_historical_in.json"
    }

    hadoop(["jar", "examples/treasury_yield/build/libs/treasury_yield-${project(':core').version}-hadoop_${hadoop_version}.jar",
            "com.mongodb.hadoop.examples.treasury.TreasuryYieldXMLConfig",
            "-D", "mongo.job.verbose=true",

            // INPUT SOURCE -
            // To use a mongo collection as input:
            "-D", "mongo.job.input.format=com.mongodb.hadoop.MongoInputFormat",
            "-D", "mongo.input.uri=mongodb://localhost:27017/mongo_hadoop.yield_historical.in",

            //Split settings
            "-D", "mongo.input.split_size=8",

            // To use a BSON file as input, use these two lines instead:
            //"-D", "mongo.job.input.format=com.mongodb.hadoop.BSONFileInputFormat",
            //"-D", 'mapred.input.dir=file:///Users/mike/dump/mongo_hadoop/yield_historical.in.bson',

            //Set the classes used for Mapper/Reducer
            "-D", "mongo.job.mapper=com.mongodb.hadoop.examples.treasury.TreasuryYieldMapper",
            "-D", "mongo.job.reducer=com.mongodb.hadoop.examples.treasury.TreasuryYieldReducer",

            //Set the values used for output keys + values.
            "-D", "mongo.job.output.key=org.apache.hadoop.io.IntWritable",
            "-D", "mongo.job.output.value=com.mongodb.hadoop.io.BSONWritable",

            "-D", "mongo.job.mapper.output.key=org.apache.hadoop.io.IntWritable",
            "-D", "mongo.job.mapper.output.value=org.apache.hadoop.io.DoubleWritable",

            // OUTPUT
            // To send the output to a mongo collection:
            "-D", "mongo.output.uri=mongodb://localhost:27017/mongo_hadoop.yield_historical.out",
            "-D", "mongo.job.output.format=com.mongodb.hadoop.MongoOutputFormat",

            // Alternatively, to write the output to a .BSON file use these two lines instead:
            //"-D", "mapred.output.dir=file:///tmp/yield_historical_out.bson",
            //"-D", "mongo.job.output.format=com.mongodb.hadoop.BSONFileOutputFormat",
    ])
}

task ufoSightings(type: Exec) {
    commandLine "mongoimport", "-d", "mongo_hadoop", "-c", "ufo_sightings.in", "--drop",
                "examples/ufo_sightings/src/main/resources/ufo_awesome.json"
}

task loadSampleDataTask(dependsOn: [":yieldHistorical", ":ufoSightings"]) {
}

def hadoop(args) {
    def line = ["${System.env.HADOOP_HOME}/bin/hadoop"]
    args.each {
        line << it
    }
    exec() {
        commandLine line
    }
}

def mapReduceDeps(it, version) {
    ["core", "common", "shuffle", "app", "jobclient"].each { module ->
        it.compile("org.apache.hadoop:hadoop-mapreduce-client-${module}:${version}") {
            exclude group: "org.apache.hadoop", module: "hadoop-hdfs"
        }
    }
}

apply from: 'gradle/maven-deployment.gradle'
