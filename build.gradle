import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'download-task'
apply plugin: 'versions'

ext.configDir = new File(rootDir, 'config')
ext.hadoop_version = project.getProperties().get('hadoop_version', '2.4').toLowerCase()
ext.versionMap = [
        '0.23': '0.23.10',
        '1.0' : '1.0.4',
        '1.1' : '1.1.2',
        'cdh4': '2.0.0-cdh4.6.0',
        'cdh5': '2.3.0-cdh5.0.0',
        '2.2' : '2.2.0',
        '2.3' : '2.3.0',
        '2.4' : '2.4.0'
].withDefault {
    throw new GradleException("Unknown hadoop version: ${hadoop_version}")
}
ext.hadoopVersion = versionMap[hadoop_version]
ext.hiveVersion = '0.12.0'
ext.hadoopBinaries = "${System.getProperty('user.home')}/hadoop-binaries"
ext.hadoopHome = "${hadoopBinaries}/hadoop-${hadoopVersion}"
ext.hiveHome = "${hadoopBinaries}/hive-${hiveVersion}"
ext.javaDriverVersion = "2.12.2"
ext.dataHome = "examples/data"

println "Building against hadoop ${hadoop_version} using ${hadoopVersion} libraries"

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        jcenter()
        maven { url "https://github.com/ben-manes/gradle-versions-plugin/raw/mvnrepo" }
    }
    dependencies {
        classpath 'me.trnl:clirr-gradle-plugin:0.4'
        classpath 'com.antwerkz.github:github-release-gradle-plugin:1.1.0'
        classpath 'de.undercouch:gradle-download-task:1.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-2'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    }

    group = 'org.mongodb'
    version = '1.2.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    dependencies {
        compile "org.mongodb:mongo-java-driver:${javaDriverVersion}"

        testCompile 'junit:junit:4.11'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'org.zeroturnaround:zt-exec:1.6'
        testCompile 'com.jayway.awaitility:awaitility:1.6.0'
        testCompile 'commons-daemon:commons-daemon:1.0.15'
        
        if(!hadoop_version.startsWith('1.')) {
            testCompile "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}"
            testCompile "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}:tests"
            testCompile "org.apache.hadoop:hadoop-common:${hadoopVersion}:tests"
            testCompile "org.apache.hadoop:hadoop-yarn-server-tests:${hadoopVersion}:tests"
            testCompile "org.apache.hadoop:hadoop-mapreduce-client-jobclient:${hadoopVersion}:tests"
        }
    }

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = [/*'-Xlint:all', */ '-Xlint:-options']
    }

    project.ext.buildingWith = { n ->
        project.hasProperty(n) && project.property(n).toBoolean()
    }

    /* Testing */
    tasks.withType(Test) {
        maxParallelForks = 1
        systemProperty 'hadoop.version', hadoop_version
        systemProperty 'hadoop.release.version', hadoopVersion
        systemProperties << System.getProperties()

        dependsOn(["jar"])

        beforeTest { descr ->
            logger.info("[Test ${descr.className} > ${descr.name}]")
        }
    }

    task testAll(dependsOn: tasks.withType(Test))
    test.dependsOn ':configureCluster'
    compileJava.dependsOn ':generateScripts'
    check.dependsOn testAll

    /* Code quality */
    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    checkstyleTest {
        classpath += configurations.compile
    }

    checkstyleMain {
        classpath += configurations.compile
    }

    findbugs {
        excludeFilter = new File("$configDir/findbugs-exclude.xml")
        sourceSets = [sourceSets.main]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
        }
    }

    jar {
        classifier = "hadoop_${hadoop_version}"
    }

    javadoc {
        options.version = true
        options.links 'http://docs.oracle.com/javase/6/docs/api/'
        options.links 'http://hadoop.apache.org/docs/r2.3.0/api'
        options.links 'http://api.mongodb.org/java/2.12.0/'
    }

    task listDependencies << {
        configurations.compile.each { File file -> println file }
    }
    
    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }
    
    configurations {
        tests
    }
    
    artifacts {
        tests testJar
    }
}

configure(subprojects.findAll { it.name.contains('examples/') }) {
    def exampleName = project.name.split('/')[1]
    jar {
        baseName = exampleName
    }
    group += ".mongo-hadoop-examples"

}

project(":core") {
    archivesBaseName = "mongo-hadoop-core"

    dependencies {
        switch (hadoop_version) {
            case ("1.0"):
                compile "org.apache.hadoop:hadoop-core:${hadoopVersion}"
                break
            case ("1.1"):
                compile "org.apache.hadoop:hadoop-core:${hadoopVersion}"
                break
            default:
                compile "org.apache.hadoop:hadoop-common:${hadoopVersion}"
                mapReduceDeps(it, hadoopVersion)
                break
        }
    }
}

project(":hive") {
    archivesBaseName = "mongo-hadoop-hive"
    dependencies {
        compile project(':core')

        compile "org.apache.hive:hive-exec:0.12.0"
        testCompile "org.apache.hive:hive-cli:0.12.0"
        testCompile "org.apache.hive:hive-service:0.12.0"
        testCompile project(path: ':core', configuration: 'tests')
        testCompile("com.nitayjoffe.thirdparty.com.jointhegrid:hive_test:4.0.0") {
            exclude group: 'org.apache.derby', module: 'derby'
            exclude group: 'org.apache.hadoop', module: 'hadoop-core'
        }
        if (hadoop_version == "cdh4") {
//            compile "org.apache.hive:hive-serde:0.10.0-cdh4.6.0"
            compile "org.apache.hive:hive-serde:0.12.0-cdh5.0.0"
        } else if (hadoop_version == "cdh5") {
            compile "org.apache.hive:hive-serde:0.12.0-cdh5.0.0"
        } else {
            compile "org.apache.hive:hive-serde:0.12.0"
        }
    }
}

project(":pig") {
    archivesBaseName = "mongo-hadoop-pig"
    dependencies {
        compile project(':core')
        compile "org.antlr:antlr:3.5.2"

        if (hadoop_version == "1.0" || hadoop_version == "1.1") {
            testCompile "log4j:log4j:1.2.17"
            testCompile "com.google.guava:guava:17.0"
        }
        if (hadoop_version == "cdh4") {
            compile "org.apache.pig:pig:0.10.0-cdh4.2.0"
        } else if (hadoop_version == "cdh5") {
            compile "org.apache.pig:pig:0.12.0-cdh5.0.0"
        } else {
            compile "org.apache.pig:pig:0.12.1"
        }
    }

    jar {
        from project(':core').sourceSets.main.output
        from sourceSets.main.output

        configurations.compile.filter {
            it.name.startsWith('mongo-java-driver')
        }.each {
            from zipTree(it)
        }
    }

}

project(":streaming") {
    archivesBaseName = "mongo-hadoop-streaming"

    dependencies {
        compile project(':core')
        compile "org.apache.hadoop:hadoop-streaming:${hadoopVersion}"
    }

    jar {
        from project(':core').sourceSets.main.output
        from sourceSets.main.output

        configurations.compile.filter {
            it.name.startsWith('mongo-java-driver')
        }.each {
            from zipTree(it)
        }
    }

    uploadArchives.onlyIf { hadoop_version != "1.0" }
}

project(":flume") {
    dependencies {
        compile project(':core')
        compile("com.cloudera:flume-core:0.9.4-cdh3u3") {
            exclude group: 'org.apache.hadoop', module: 'hadoop-core'
            exclude group: 'com.cloudera.cdh', module: 'hadoop-ant'
        }
    }
}

project(":examples/treasury_yield") {
    uploadArchives.onlyIf { false }
    dependencies {
        compile project(':core')
        testCompile project(path: ':core', configuration: 'tests')
        testCompile project(':streaming')
        testCompile 'org.slf4j:slf4j-jdk14:1.7.7'
    }
}

project(":examples/enron") {
    uploadArchives.onlyIf { false }
    dependencies {
        compile project(':core')
    }
}

project(":examples/sensors") {
    uploadArchives.onlyIf { false }
    dependencies {
        compile project(':core')
    }
}

project(":integration-tests") {
    uploadArchives.onlyIf { false }
    dependencies {
        testCompile project(':core')
        testCompile project(':streaming')
        testCompile 'org.slf4j:slf4j-jdk14:1.7.7'
    }
}

task installHadoop() << {
    new File(hadoopHome).getParentFile().mkdirs()

    println "Checking if ${hadoopHome}/bin exists"
    if (!new File("${hadoopHome}/bin").exists()) {
        def url
        switch (hadoop_version) {
            case ("cdh4"):
                url = "http://archive.cloudera.com/cdh4/cdh/4/hadoop-${hadoopVersion}.tar.gz"
                break
            case ("cdh5"):
                url = "http://archive.cloudera.com/cdh5/cdh/5/hadoop-${hadoopVersion}.tar.gz"
                break
            default:
                url = "http://archive.apache.org/dist/hadoop/common/hadoop-${hadoopVersion}/hadoop-${hadoopVersion}.tar.gz"
                break
        }
        println "No installation found.  Downloading ${hadoopVersion}"
        download {
            src url
            dest hadoopBinaries
            onlyIfNewer true
        }

        println "Extracting hadoop ${hadoopVersion} download"
        copy {
            from(tarTree("${hadoopBinaries}/hadoop-${hadoopVersion}.tar.gz"))
            into hadoopBinaries
        }
    }
}


task installHive() << {
    println "Checking if ${hiveHome}/bin exists"
    if (!new File("${hiveHome}/bin").exists()) {
        def url = 'http://apache.mirrors.tds.net/hive/hive-0.12.0/hive-0.12.0.tar.gz'
        
        println "No hive installation found.  Downloading ${hiveVersion}"
        download {
            src url
            dest hadoopBinaries
            onlyIfNewer true
        }

        println "Extracting hive ${hiveVersion} download"
        copy {
            from(tarTree(resources.gzip("${hadoopBinaries}/hive-${hiveVersion}.tar.gz")))
            into hadoopBinaries
        }
    }
    
}

task historicalYield(dependsOn: 'configureCluster') << {
    exec() {
        commandLine "mongoimport", "-d", "mongo_hadoop", "-c", "yield_historical.in", "--drop",
                    "examples/treasury_yield/src/main/resources/yield_historical_in.json"
    }

    hadoop("examples/treasury_yield/build/libs/treasury_yield-${project(':core').version}-hadoop_${hadoop_version}.jar",
           "com.mongodb.hadoop.examples.treasury.TreasuryYieldXMLConfig", [
                "mongo.input.uri=mongodb://localhost:27017/mongo_hadoop.yield_historical.in",
                "mongo.output.uri=mongodb://localhost:27017/mongo_hadoop.yield_historical.out"
           ])
}

task sensorData(dependsOn: 'configureCluster') << {
    hadoop("examples/sensors/build/libs/sensors-${project(':core').version}-hadoop_${hadoop_version}.jar",
           "com.mongodb.hadoop.examples.sensors.Devices", [])

    hadoop("examples/sensors/build/libs/sensors-${project(':core').version}-hadoop_${hadoop_version}.jar",
           "com.mongodb.hadoop.examples.sensors.Logs", ["io.sort.mb=100"])
}

task enronEmails(dependsOn: 'configureCluster') << {
    new File(dataHome).mkdirs()
    download {
        src 'https://s3.amazonaws.com/mongodb-enron-email/enron_mongo.tar.bz2'
        dest dataHome
        onlyIfNewer true
    }
    if (!new File("${dataHome}/dump").exists()) {
        println "extracting email data"
        copy {
            from(tarTree("${dataHome}/enron_mongo.tar.bz2"))
            into dataHome
        }
    }

    exec() {
        commandLine "mongorestore", "-v", "-d", "mongo_hadoop", "--drop", "${dataHome}/dump/enron_mail"
    }

    hadoop("examples/enron/build/libs/enron-${project(':core').version}-hadoop_${hadoop_version}.jar",
           "com.mongodb.hadoop.examples.enron.EnronMail", ["mongo.input.split_size=64"])
}

task generateScripts() {
    copy {
        from 'bin/templates'
        into 'bin'
        filter ReplaceTokens, tokens: [
                HADOOP_HOME: hadoopHome.toString(),
                HADOOP_BINARIES: hadoopBinaries.toString(),
                HADOOP_VERSION: hadoop_version,
                HIVE_HOME: hiveHome.toString(),
                BIN_PATH   : project.rootDir.getAbsolutePath() + '/bin'
        ]
    }
}

def hadoop(jar, className, args) {
    def line = ["${hadoopHome}/bin/hadoop",
                "jar", jar, className,
                //Split settings
                "-Dmongo.input.split_size=8",
                "-Dmongo.job.verbose=true",
    ]
    args.each {
        line << "-D${it}"
    }
    println "Executing hadoop job:\n ${line.join(' \\\n\t')}"
    def hadoopEnv = [:]
    if (hadoop_version.startsWith("cdh")) {
        hadoopEnv.MAPRED_DIR = 'share/hadoop/mapreduce2'
    }
    exec() {
        environment << hadoopEnv
        commandLine line
    }
}

task copyFiles() << {
    def hadoopEtc
    def hadoopLib
    if (hadoop_version.startsWith("1")) {
        hadoopLib = "${hadoopHome}/lib"
        hadoopEtc = "${hadoopHome}/conf"
    } else {
        hadoopLib = "${hadoopHome}/share/hadoop/common"
        hadoopEtc = "${hadoopHome}/etc/hadoop"
    }

    println "Updating mongo jars"
    copy {
        from "core/build/libs/mongo-hadoop-core-${project(':core').version}-hadoop_${hadoop_version}.jar"
        into hadoopLib
        rename { "mongo-hadoop-core.jar" }
    }
    copy {
        from "hive/build/libs/mongo-hadoop-hive-${project(':core').version}-hadoop_${hadoop_version}.jar"
        into hiveHome + '/lib'
        rename { "mongo-hadoop-hive.jar" }
    }
    download {
        src "http://central.maven.org/maven2/org/mongodb/mongo-java-driver/${javaDriverVersion}/mongo-java-driver-${javaDriverVersion}.jar"
        dest "${hadoopLib}/mongo-java-driver.jar"
        onlyIfNewer true
    }
    println "Updating cluster configuration"
    copy {
        from 'clusterConfigs'
        into hadoopEtc
    }
}

task configureCluster(dependsOn: ['installHadoop', 'installHive', 'copyFiles']) << {
}

def mapReduceDeps(it, version) {
    ["core", "common", "shuffle", "app", "jobclient"].each { module ->
        it.compile("org.apache.hadoop:hadoop-mapreduce-client-${module}:${version}") {
            exclude group: "org.apache.hadoop", module: "hadoop-hdfs"
        }
    }
}

apply from: 'gradle/maven-deployment.gradle'